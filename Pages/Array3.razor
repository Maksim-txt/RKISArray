@page "/array3"
@using BlazorApp1.Components;
@using Models;

<PageTitle>Двумерные массивы</PageTitle>

<DialogComponent Title="Hello World!" Opened="dialogShown" CloseButtonClicked="@(() => {dialogShown = false;  errorOccurred = false;})">
    <BodyContent>
        @if (!errorOccurred) {
            <p style="font-size: 13px;">
                <select class="select" @bind="MatrixId1" >
                    @if (matrices != null && matrices.Count >= 1)
                    {
                        @foreach(var matrix in matrices)
                        {
                            <option>@matrix.Id</option>
                        }
                    }
                </select>
                <select class="select" @bind="MatrixId2" >
                    @if (matrices != null && matrices.Count >= 1)
                    {
                        @foreach(var matrix in matrices)
                        {
                            <option>@matrix.Id</option>
                        }
                    }
                </select>
            </p>
        }
        @if(error != null && errorOccurred == true) {
            <p>@error.message</p>
        }

    </BodyContent>
    <FooterContent>
        @if (!errorOccurred){
            <button @onclick="multiply">Умножить</button>
        }
    </FooterContent>
</DialogComponent>

<div class="parent">
    <div class="flex-container lightgray flex-center border column">

        <div class="sizemetr">
            <p>Столбцы <input type="number" class="input" @bind-value="Columns" placeholder="Столбцы" /></p>
            <p>Строки <input type="number" class="input" @bind-value="Rows" placeholder="Строки" /></p>
            <button @onclick="CreateMatrix">Создать матрицу</button>

            @if (matrices.Count >= 2){
                <button @onclick="ShowDialog">Умножение матриц</button>
            }

        </div>

        @if (matrices.Count >= 1)
        {
            foreach (Matrix matrix in matrices)
            {
                
                <div class="matrix">
                    <p>Матрица @matrix.Id</p>
                    <table class="table">
                        @if (matrix.Rows >= 1 && matrix.Columns >= 1)
                        {
                            @for (int i = 0; i < matrix.Columns; i++)
                            {
                                int ii = i;
                                <tr>
                                    @for (int j = 0; j < matrix.Rows; j++)
                                    {
                                        int jj = j;
                                        <td>
                                            <p><input type="number" class="input" @bind-value="matrix.array[ii * matrix.Rows + jj]" /></p>
                                        </td>
                                    }
                                </tr>
                            }
                        }
                    </table> 
                </div>
            }
        }
    </div>

</div>

@code {

    private List<Matrix> matrices = new List<Matrix>();
    private Error error;
    private bool dialogShown = false;
    private static int _rows = 3;
    private static int _columns = 3;
    private bool errorOccurred = false;
    private static int _matrixId1 = 1;
    private static int _matrixId2 = 2;

    private static int MatrixId1
    {
        get => _matrixId1;
        set
        {
            _matrixId1 = value;
        }
    }
    private static int MatrixId2
    {
        get => _matrixId2;
        set
        {
            _matrixId2 = value;
        }
    }

    private static int Rows
    {
        get => _rows;
        set
        {
            _rows = value;
        }
    }
    private static int Columns
    {
        get => _columns;
        set
        {
            _columns = value;
        }
    }

    private void CreateMatrix()
    {
        matrices.Add(new Matrix(Rows, Columns));
    }

    private void ShowDialog()
    {
        dialogShown = true;
    }

    private void multiply()
    {

        int matrixId1 = MatrixId1 - 1;
        int matrixId2 = MatrixId2 - 1;
        int[] matrix1 = matrices[matrixId1].array;
        int[] matrix2 = matrices[matrixId2].array;
        if (matrices[matrixId2].Columns  != matrices[matrixId1].Rows)
        {
            errorOccurred = true;
            error = new Error("Умножение не возможно! Количество столбцов первой матрицы не равно количеству строк второй матрицы.");
            ShowDialog();
        }
        if (!errorOccurred){
            Matrix matrixC = new Matrix(matrices[matrixId1].Rows, matrices[matrixId2].Columns);
            int[]? arrayC = new int[matrices[matrixId1].Rows * matrices[matrixId2].Columns];
            for (int i = 0; i < matrices[matrixId1].Rows; i++)
            {
                for (int j = 0; j < matrices[matrixId2].Columns; j++)
                {
                    arrayC[i * matrices[matrixId1].Rows + j] = 0;
                    for (int k = 0; k < matrices[matrixId2].Columns; k++)
                        arrayC[i * matrices[matrixId1].Rows + j] += matrix1[i * matrices[matrixId1].Rows + k] * matrix2[k * matrices[matrixId2].Columns + j];
                }
            }
            matrixC.array = arrayC;
            matrices.Add(matrixC);

            dialogShown = false;
        }
        
    }
}